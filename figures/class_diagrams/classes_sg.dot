digraph "classes" {
charset="utf-8"
rankdir=BT
"3" [label="{CommunityPlus|dendrogram : NoneType, VertexDendrogram\ln_nodes : NoneType\lresolution : NoneType\l|community_metric(edges, weights, clabels, parameter)\lcompare_communities(comm1, comm2, method, remove_none)\ldetect_communities(edges, weights, n_nodes, alg, ncmax, resolution)\l}", shape="record"];
"6" [label="{DataGraph|B : NoneType\lCD\lCD_report : dict, NoneType\lREF : str\lT : NoneType\lTeq : NoneType\lcluster_centers : NoneType\lcluster_labels : NoneType, ndarray\lcluster_sizes : NoneType\ldf_edges : DataFrame, TextFileReader\ldf_nodes : NoneType, DataFrame, TextFileReader\ldf_nodes2\ledge_class : NoneType, str\ledge_ids : list\llabel : str\llg_report : dict\lmetadata : dict\ln_edges : int\ln_nodes : int\lnc : dict\lnodes : list, NoneType\lpath2T : NoneType\lpath2T_old\lpath2edges : NoneType\lpath2graph : NoneType, Path\lpath2mdata : NoneType\lpath2nodes : NoneType\lsave_T : bool, NoneType\lsg : NoneType\lweights : list, NoneType\l|add_attributes(names, values, fill_value)\ladd_feature_matrix(T, save_T)\ladd_new_nodes(nodes)\ladd_single_edge(source, target, weight, attributes)\ladd_single_node(node, attributes)\lcommunity_metric(cd_alg, parameter)\lcompareCommunities(comm1, comm2, method, remove_none)\lcomputeSimGraph(s_min, n_gnodes, n_edges, similarity, g, blocksize, useGPU, tmp_folder, save_every, verbose)\lcompute_eq_nodes(name)\lcompute_ppr(th, inplace)\ldetectCommunities(alg, ncmax, label)\ldisconnect_nodes(source, target, directed)\ldrop_single_node(node)\lfilter_edges(th)\lfilter_nodes_by_threshold(att, th, bound)\lfilter_nodes_by_value(att, value)\lget_attributes()\lget_matrix()\lget_nodes_by_novalue(att, value)\lget_nodes_by_threshold(att, th, bound)\lget_nodes_by_value(att, value)\lgraph_layout(alg, color_att, gravity, save_gexf)\lhas_saved_features()\lload_graph()\lload_metadata()\llocal_graph_analysis(parameter, label)\lpprint(n)\lremove_attributes(names)\lremove_isolated()\lsaveGraph()\lsave_feature_matrix()\lsave_metadata()\lsave_nodes()\lset_edges(source_nodes, target_nodes, weights)\lset_nodes(nodes, T, save_T)\lsort_nodes()\lsub_graph(ynodes, sampleT)\lupdate_metadata()\l}", shape="record"];
"7" [label="{DataGraph_sql|T : ndarray\lbase_fields : NoneType\ldb : NoneType\ldb_info\ldf_nodes : DataFrame\lfields\ln_nodes\lnodes : map\lsub_fields : NoneType\ltopics_field : NoneType\l|db2df(fields, db_info, max_num_nodes, idREF, refCol)\lexportClusters(field, label)\lgetTopics()\limportData()\lsaveGraph(extralabel, newREF, mode)\lsaveModel(Id, tipo, nc)\l}", shape="record"];
"18" [label="{SEdge|Xs : NoneType\lXt : NoneType\ldf_edges : DataFrame\ledge_ids : list\llabel_source : str, NoneType\llabel_target : str, NoneType\ln_edges\ln_source : NoneType, int\ln_target : NoneType, int\lpath2Xs\lpath2Xt\lsave_X : bool\lweights : list, NoneType\l|add_single_edge(source, target, weight, attributes)\ladd_single_node(node, attributes)\lcomputeSimBiGraph(s_min, n_gnodesS, n_gnodesT, n_edges, similarity, g, blocksize, useGPU, verbose)\ldisconnect_nodes(source, target, directed)\ldrop_single_node(node)\lget_source_nodes()\lget_target_nodes()\lget_terminals()\lsave_feature_matrix()\lset_edges(source_nodes, target_nodes, weights)\lset_nodes(nodes_orig, nodes_dest, Xs, Xt, save_T)\lupdate_metadata()\l}", shape="record"];
"20" [label="{SimBiGraph|Xeq : NoneType\lY\lYeq : NoneType\lcluster_ids_source : NoneType\lcluster_ids_target : NoneType\ledge_ids : list, tuple, NoneType\ln_clusters_source : NoneType, int\ln_clusters_target : NoneType\ln_preclusters_source : NoneType\ln_preclusters_target : NoneType\ln_source\ln_target\ls_min : float, NoneType, ndarray\lweights : list, NoneType\l|cluster_equivalent_nodes(reduceX)\lconnectivity_graph(R, metric, verbose)\lhe_affinity(X, Y, R2, mapping, g)\lsim_graph(s_min, n_edges)\l}", shape="record"];
"21" [label="{SimGraph|X\lXeq : NoneType\lcluster_ids : NoneType\ldim\ledge_ids : list, NoneType, tuple\ln_clusters : NoneType, int\ln_edges : int, NoneType\ln_nodes\ln_preclusters : NoneType\ls_min : float, NoneType, ndarray\lweights : NoneType, list\l|JS2_affinity(X, Y, R2, mapping, g)\lcluster_equivalent_nodes(reduceX)\lcomputeXeq()\lcompute_id_graph(R, verbose)\lconnectivity_graph(R, metric, verbose)\ldiv2sim(div, mapping, g, B)\lhe_affinity(X, R2, mapping, g)\ll1_affinity(X, R, mapping, g)\ll2_affinity(X, R2, mapping, g)\lshow_JS_bounds(s_min, sim, g, out_path, verbose)\lsim2div(s, mapping, g, B)\lsimTest(D, R, sim, g, fpath, label)\lsim_graph(s_min, n_edges)\l}", shape="record"];
"23" [label="{SuperGraph|keep_active : bool\llabel : str\lmetagraph\lpath : NoneType\lpath2sedges : NoneType\lpath2snodes : NoneType\lsedges : dict\lsnodes : dict\l|activate_all()\lactivate_sedge(label)\lactivate_snode(label)\laddSuperEdge(sedge, weight, attributes)\laddSuperNode(snode, attributes)\ladd_snode_attributes(label, att, att_values)\lclean_up_metagraph()\lcomputeSimBiGraph(s_label, t_label, e_label, s_min, n_edges, n_gnodesS, n_gnodesT, similarity, g, blocksize, useGPU, tmp_folder, save_every, verbose)\lcomputeSimGraph(label, s_min, n_edges, n_gnodes, similarity, g, blocksize, useGPU, tmp_folder, save_every, verbose)\lcompute_ppr(s_label, t_label, th, inplace)\lcosine_sim(xlabel, ylabel)\ldeactivate()\ldeactivate_sedge(label)\ldeactivate_snode(label)\ldetectCommunities(label, alg, ncmax, comm_label)\ldisambiguate_node(node_name)\ldrop_sedge(label)\ldrop_snode(label)\lduplicate_snode(xlabel, ylabel, out_path)\lexport_2_halo(e_label, s_att1, s_att2, t_att, t_att2)\lfilter_edges_from_sedge(label, th)\lfilter_edges_from_snode(label, th)\lget_attributes(label, is_snode_name)\lget_metadata(label, is_node_name)\lget_sedges()\lget_snodes()\lget_terminals(e_label)\lgraph_layout(snode_label, attribute, gravity)\lis_active_sedge(e_label)\lis_active_snode(label)\lis_sedge(e_label)\lis_snode(label)\llocal_snode_analysis(label, parameter)\lmakeSuperNode(label, out_path, nodes, T, attributes, edge_class, save_T)\lnode_profile()\lremove_isolated_nodes(label)\lremove_snode_attributes(label, att_names)\lsave_metagraph()\lsave_supergraph()\lsnode_from_atts(source, attrib, target, path_snode, path_sedge, e_label, att_size)\lsnode_from_edges(source, edges, target, path_snode, path_sedge, e_label)\lsnode_from_eqs(source, target, path_snode, path_sedge, e_label)\lsub_snode(xlabel, ynodes, ylabel, sampleT, save_T)\lsub_snode_by_novalue(xlabel, att, value, ylabel, sampleT)\lsub_snode_by_threshold(xlabel, att, th, bound, ylabel)\lsub_snode_by_value(xlabel, att, value, ylabel)\ltransduce(xylabel, n, normalize, keep_active)\ltransitive_graph(e_label, xmlabel, mylabel, path_sedge, keep_active)\l}", shape="record"];
"24" [label="{ThOps|blocksize : int\lfpath_edges\lfpath_values\lsave_every : float\ltmp_folder : NoneType\luseGPU : bool\l|bc_sim_bigraph(X: csr_matrix, Y: csr_matrix, s_min: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]\lbc_sim_graph(X: csr_matrix, s_min: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]\lcosine_sim_bigraph(X: csr_matrix, Y: csr_matrix, s_min: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]\lcosine_sim_graph(X: csr_matrix, s_min: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]\lhe_neighbors_bigraph(X: csr_matrix, Y: csr_matrix, R2: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]\lhe_neighbors_graph(X: csr_matrix, R2: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]\lncosine_sim_bigraph(X: csr_matrix, Y: csr_matrix, s_min: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]\lncosine_sim_graph(X: csr_matrix, s_min: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]\lth_prod(th: float, X: csr_matrix, Y: csr_matrix, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]\lth_selfprod(th: float, X: csr_matrix, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]\l}", shape="record"];
"27" [label="{Validator|DM\lSG : NoneType\lblocksize : int\lcorpus_name\lepn : int\lmodel\lmodels_fname : str\ln_nodes_db : int\ln_nodes_rg : int\lpath2out\lpath2rgs\lpath2sca\lpath2sub\lpath2val\lpath2var\lref_graph_epn : int\lref_graph_prefix : str\luseGPU : bool\l|analyze_scalability()\lanalyze_variability()\lcompute_all_sim_graphs()\lcompute_reference_graph()\lreadCoordsFromFile(fpath, fields, sparse, path2nodenames, ref_col, path2params)\lshow_scalability_results()\lshow_subtrain_results()\lshow_validation_results()\lshow_variability_results()\lsubsample_reference_graph()\lvalidate_subtrain_models()\lvalidate_topic_models()\l}", shape="record"];
"7" -> "6" [arrowhead="empty", arrowtail="none"];
"18" -> "6" [arrowhead="empty", arrowtail="none"];
"20" -> "21" [arrowhead="empty", arrowtail="none"];
"21" -> "24" [arrowhead="empty", arrowtail="none"];
"3" -> "6" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CD", style="solid"];
"6" -> "23" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metagraph", style="solid"];
"21" -> "6" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sg", style="solid"];
"23" -> "27" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SG", style="solid"];
}
