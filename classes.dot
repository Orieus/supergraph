digraph "classes" {
rankdir=BT
charset="utf-8"
"rdigraphs.datamanager.callbacks.AuthorsDisambiguator" [color="black", fontcolor="black", label=<{AuthorsDisambiguator|<br ALIGN="LEFT"/>|patstats_person(df: pd.DataFrame)<br ALIGN="LEFT"/>patstats_person_application(df: pd.DataFrame)<br ALIGN="LEFT"/>projects_researcher_project(df: pd.DataFrame)<br ALIGN="LEFT"/>projects_researchers(df: pd.DataFrame)<br ALIGN="LEFT"/>scopus_authorship(df: pd.DataFrame)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.datamanager.base_dm_neo4j.BaseDMneo4j" [color="black", fontcolor="black", label=<{BaseDMneo4j|driver : NoneType<br ALIGN="LEFT"/>|drop_node_property(label: str, property: str): None<br ALIGN="LEFT"/>drop_relationship(relationship_type: str): None<br ALIGN="LEFT"/>export_graph(label_nodes, path2nodes, col_ref_nodes, label_edges, path2edges)<br ALIGN="LEFT"/>get_db_structure(): dict<br ALIGN="LEFT"/>make_edges(df: pd.DataFrame, source: typing.Tuple[str, typing.Tuple[str, str]], destination: typing.Tuple[str, typing.Tuple[str, str]], relationship: typing.Tuple[str, typing.Dict[str, str]])<br ALIGN="LEFT"/>properties_of_label(label: str): typing.List[str]<br ALIGN="LEFT"/>properties_of_relationship(relationship_type: str): typing.List[str]<br ALIGN="LEFT"/>read_edges(relationship_type: str, limit: int): typing.Optional[pd.DataFrame]<br ALIGN="LEFT"/>read_nodes(label: str, limit: int, select_options, filter_options, order_options): pd.DataFrame<br ALIGN="LEFT"/>reset_database(): None<br ALIGN="LEFT"/>write_dataframe(df: pd.DataFrame, source: typing.Tuple[str, typing.List[str]], destination: typing.Tuple[str, typing.List[str]], edge: typing.Tuple[str, typing.List[str]]): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.datamanager.base_dm_sql.BaseDMsql" [color="black", fontcolor="black", label=<{BaseDMsql|connector<br ALIGN="LEFT"/>dbON : bool<br ALIGN="LEFT"/>dbname<br ALIGN="LEFT"/>password : NoneType<br ALIGN="LEFT"/>port : NoneType<br ALIGN="LEFT"/>server : NoneType<br ALIGN="LEFT"/>unix_socket : NoneType<br ALIGN="LEFT"/>user : NoneType<br ALIGN="LEFT"/>|addTableColumn(tablename, columnname, columntype)<br ALIGN="LEFT"/>deleteDBtables(tables)<br ALIGN="LEFT"/>dropTableColumn(tablename, columnname)<br ALIGN="LEFT"/>exportTable(tablename, fileformat, path, filename, cols)<br ALIGN="LEFT"/>export_table_to_csv(table_name: str, output_file: typing.Union[str, pathlib.Path], block_size: typing.Optional[int], max_rows: typing.Optional[int], gzipped: bool, callbacks: typing.Optional[typing.List[typing.Callable[[pd.DataFrame], pd.DataFrame]]], select_options: typing.Optional[str], filter_options: typing.Optional[str], order_options: typing.Optional[str])<br ALIGN="LEFT"/>getColumnNames(tablename)<br ALIGN="LEFT"/>getTableInfo(tablename)<br ALIGN="LEFT"/>getTableNames()<br ALIGN="LEFT"/>insertInTable(tablename, columns, arguments)<br ALIGN="LEFT"/>readDBtable(tablename, limit, selectOptions, filterOptions, orderOptions)<br ALIGN="LEFT"/>setField(tablename, keyfld, valueflds, values)<br ALIGN="LEFT"/>upsert(tablename, keyfld, df, robust)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.community_plus.community_plus.CommunityPlus" [color="black", fontcolor="black", label=<{CommunityPlus|dendrogram : NoneType<br ALIGN="LEFT"/>n_nodes : NoneType<br ALIGN="LEFT"/>resolution : NoneType<br ALIGN="LEFT"/>|community_metric(edges, weights, clabels, parameter)<br ALIGN="LEFT"/>compare_communities(comm1, comm2, method, remove_none)<br ALIGN="LEFT"/>detect_communities(edges, weights, n_nodes, alg, ncmax, resolution)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.datamanager.datamanager.DMneo4j" [color="black", fontcolor="black", label=<{DMneo4j|<br ALIGN="LEFT"/>|showDBview()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.datamanager.datamanager.DMsql" [color="black", fontcolor="black", label=<{DMsql|<br ALIGN="LEFT"/>|showDBview()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.supergraph.snode.DataGraph" [color="black", fontcolor="black", label=<{DataGraph|B : NoneType<br ALIGN="LEFT"/>CD<br ALIGN="LEFT"/>CD_report : NoneType, dict<br ALIGN="LEFT"/>REF : str<br ALIGN="LEFT"/>T : NoneType<br ALIGN="LEFT"/>Teq : NoneType<br ALIGN="LEFT"/>cluster_centers : NoneType<br ALIGN="LEFT"/>cluster_labels : NoneType, ndarray<br ALIGN="LEFT"/>cluster_sizes : NoneType<br ALIGN="LEFT"/>df_edges : NoneType, DataFrame, TextFileReader<br ALIGN="LEFT"/>df_nodes : NoneType, DataFrame, TextFileReader<br ALIGN="LEFT"/>df_nodes2<br ALIGN="LEFT"/>edge_class : NoneType, str<br ALIGN="LEFT"/>edge_ids : list<br ALIGN="LEFT"/>label : str<br ALIGN="LEFT"/>lg_report : dict<br ALIGN="LEFT"/>metadata : dict<br ALIGN="LEFT"/>n_edges : int<br ALIGN="LEFT"/>n_nodes : int<br ALIGN="LEFT"/>nc : dict<br ALIGN="LEFT"/>nodes : list, NoneType<br ALIGN="LEFT"/>path2T : NoneType<br ALIGN="LEFT"/>path2T_old<br ALIGN="LEFT"/>path2edges : NoneType<br ALIGN="LEFT"/>path2graph : NoneType, Path<br ALIGN="LEFT"/>path2mdata : NoneType<br ALIGN="LEFT"/>path2nodes : NoneType<br ALIGN="LEFT"/>save_T : bool<br ALIGN="LEFT"/>sg : NoneType<br ALIGN="LEFT"/>weights : NoneType, list<br ALIGN="LEFT"/>|add_attributes(names, values, fill_value)<br ALIGN="LEFT"/>add_feature_matrix(T, save_T)<br ALIGN="LEFT"/>add_new_nodes(nodes)<br ALIGN="LEFT"/>add_single_edge(source, target, weight, attributes)<br ALIGN="LEFT"/>add_single_node(node, attributes)<br ALIGN="LEFT"/>community_metric(cd_alg, parameter)<br ALIGN="LEFT"/>compareCommunities(comm1, comm2, method, remove_none)<br ALIGN="LEFT"/>computeSimGraph(s_min, n_gnodes, n_edges, similarity, g, blocksize, useGPU, tmp_folder, save_every, verbose)<br ALIGN="LEFT"/>compute_eq_nodes(name)<br ALIGN="LEFT"/>compute_ppr(th, inplace)<br ALIGN="LEFT"/>detectCommunities(alg, ncmax, label)<br ALIGN="LEFT"/>disconnect_nodes(source, target, directed)<br ALIGN="LEFT"/>drop_single_node(node)<br ALIGN="LEFT"/>filter_edges(th)<br ALIGN="LEFT"/>filter_nodes_by_threshold(att, th, bound)<br ALIGN="LEFT"/>filter_nodes_by_value(att, value)<br ALIGN="LEFT"/>get_attributes()<br ALIGN="LEFT"/>get_matrix()<br ALIGN="LEFT"/>get_nodes_by_novalue(att, value)<br ALIGN="LEFT"/>get_nodes_by_threshold(att, th, bound)<br ALIGN="LEFT"/>get_nodes_by_value(att, value)<br ALIGN="LEFT"/>graph_layout(alg, color_att, gravity, save_gexf)<br ALIGN="LEFT"/>has_saved_features()<br ALIGN="LEFT"/>load_graph()<br ALIGN="LEFT"/>load_metadata()<br ALIGN="LEFT"/>local_graph_analysis(parameter, label)<br ALIGN="LEFT"/>pprint(n)<br ALIGN="LEFT"/>remove_attributes(names)<br ALIGN="LEFT"/>remove_isolated()<br ALIGN="LEFT"/>saveGraph()<br ALIGN="LEFT"/>save_feature_matrix()<br ALIGN="LEFT"/>save_metadata()<br ALIGN="LEFT"/>save_nodes()<br ALIGN="LEFT"/>set_edges(source_nodes, target_nodes, weights)<br ALIGN="LEFT"/>set_nodes(nodes, T, save_T)<br ALIGN="LEFT"/>sort_nodes()<br ALIGN="LEFT"/>sub_graph(ynodes, sampleT)<br ALIGN="LEFT"/>update_metadata()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.supergraph.snode_sql.DataGraph_sql" [color="black", fontcolor="black", label=<{DataGraph_sql|T : ndarray<br ALIGN="LEFT"/>base_fields : NoneType<br ALIGN="LEFT"/>db : NoneType<br ALIGN="LEFT"/>db_info<br ALIGN="LEFT"/>df_nodes : DataFrame<br ALIGN="LEFT"/>fields<br ALIGN="LEFT"/>n_nodes<br ALIGN="LEFT"/>nodes : map<br ALIGN="LEFT"/>sub_fields : NoneType<br ALIGN="LEFT"/>topics_field : NoneType<br ALIGN="LEFT"/>|db2df(fields, db_info, max_num_nodes, idREF, refCol)<br ALIGN="LEFT"/>exportClusters(field, label)<br ALIGN="LEFT"/>getTopics()<br ALIGN="LEFT"/>importData()<br ALIGN="LEFT"/>saveGraph(extralabel, newREF, mode)<br ALIGN="LEFT"/>saveModel(Id, tipo, nc)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.datamanager.cypher.DataLoadingStatement" [color="black", fontcolor="black", label=<{DataLoadingStatement|csv_files_path : Path<br ALIGN="LEFT"/>csv_line : str<br ALIGN="LEFT"/>data_access : str<br ALIGN="LEFT"/>|flatten_dic(d, sep, property_name_prefix)<br ALIGN="LEFT"/>load_clause(parameters, using_periodic_commit): str<br ALIGN="LEFT"/>match_clause(labels, matching_columns, matching_properties, nodes): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.datamanager.datamanager.DataManager" [color="black", fontcolor="black", label=<{DataManager|Neo4j : NoneType<br ALIGN="LEFT"/>SQL : dict<br ALIGN="LEFT"/>dbON : bool<br ALIGN="LEFT"/>lastSQL : NoneType<br ALIGN="LEFT"/>metadata<br ALIGN="LEFT"/>path2table<br ALIGN="LEFT"/>table_name<br ALIGN="LEFT"/>|get_names_of_dataset_tables()<br ALIGN="LEFT"/>import_graph_data_from_tables(table_name, sampling_factor)<br ALIGN="LEFT"/>load_SCOPUS_citations_all(col_ref, atts, mode)<br ALIGN="LEFT"/>load_SCOPUS_citations_with_atts(col_ref, atts, mode)<br ALIGN="LEFT"/>readCoordsFromFile(fpath, fields, sparse, path2nodenames, ref_col)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.datamanager.callbacks.Disambiguator" [color="black", fontcolor="black", label=<{Disambiguator|file : Path<br ALIGN="LEFT"/>map : TextFileReader, NoneType<br ALIGN="LEFT"/>new_id : str<br ALIGN="LEFT"/>patents_prefix : str<br ALIGN="LEFT"/>patents_subset<br ALIGN="LEFT"/>projects_prefix : str<br ALIGN="LEFT"/>projects_subset<br ALIGN="LEFT"/>scopus_prefix : str<br ALIGN="LEFT"/>scopus_subset<br ALIGN="LEFT"/>|handle_duplicates(df)<br ALIGN="LEFT"/>merge(mapping: pd.DataFrame, df: pd.DataFrame, field: str, prefix: str)<br ALIGN="LEFT"/>replace(mapping: pd.DataFrame, df: pd.DataFrame, field: str, prefix: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.labtaskmanager.LabTaskManager" [color="black", fontcolor="black", label=<{LabTaskManager|keep_active : bool<br ALIGN="LEFT"/>|analyze_radius(corpus)<br ALIGN="LEFT"/>analyze_sampling(corpus)<br ALIGN="LEFT"/>compute_citation_centralities(path, n)<br ALIGN="LEFT"/>get_equivalent_classes(corpus)<br ALIGN="LEFT"/>get_keyword_descriptions(vocabfile, W, n_keywords)<br ALIGN="LEFT"/>get_source_info()<br ALIGN="LEFT"/>read_vocabulary(vocab_filename)<br ALIGN="LEFT"/>show_all_citation_centralities(path, n)<br ALIGN="LEFT"/>show_equivalent_classes()<br ALIGN="LEFT"/>show_validation_results_e(path)<br ALIGN="LEFT"/>validate_all_models_cd(d)<br ALIGN="LEFT"/>validate_topic_models(path2models)<br ALIGN="LEFT"/>visualize_bigraph()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.datamanager.cypher.LoadAttributesTable" [color="black", fontcolor="black", label=<{LoadAttributesTable|<br ALIGN="LEFT"/>|assemble(parameters: dict): typing.Union[str, typing.List[str]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.datamanager.cypher.LoadJoinTable" [color="black", fontcolor="black", label=<{LoadJoinTable|<br ALIGN="LEFT"/>|assemble(parameters: dict): typing.Union[str, typing.List[str]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.datamanager.cypher.LoadTable" [color="black", fontcolor="black", label=<{LoadTable|<br ALIGN="LEFT"/>|assemble(parameters: dict): typing.Union[str, typing.List[str]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.datamanager.cypher.MakeRelationship" [color="black", fontcolor="black", label=<{MakeRelationship|<br ALIGN="LEFT"/>|assemble(parameters: dict): typing.Union[str, typing.List[str]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.menu_navigator.menu_navigator.MenuNavigator" [color="black", fontcolor="black", label=<{MenuNavigator|path2menu : str<br ALIGN="LEFT"/>paths2data : Optional[typing.Optional[str]]<br ALIGN="LEFT"/>tm<br ALIGN="LEFT"/>|clear()<br ALIGN="LEFT"/>front_page(title)<br ALIGN="LEFT"/>navigate(option, active_options)<br ALIGN="LEFT"/>query_options(options, active_options, msg, zero_option)<br ALIGN="LEFT"/>request_confirmation(msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.datamanager.callbacks.OrganizationsDisambiguator" [color="black", fontcolor="black", label=<{OrganizationsDisambiguator|<br ALIGN="LEFT"/>|projects_organizations(df: pd.DataFrame)<br ALIGN="LEFT"/>projects_projects(df: pd.DataFrame)<br ALIGN="LEFT"/>scopus_authorship(df: pd.DataFrame)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.supergraph.sedge.SEdge" [color="black", fontcolor="black", label=<{SEdge|Xs : NoneType<br ALIGN="LEFT"/>Xt : NoneType<br ALIGN="LEFT"/>df_edges : DataFrame<br ALIGN="LEFT"/>edge_ids : list<br ALIGN="LEFT"/>label_source : str, NoneType<br ALIGN="LEFT"/>label_target : str, NoneType<br ALIGN="LEFT"/>n_edges<br ALIGN="LEFT"/>n_source : NoneType, int<br ALIGN="LEFT"/>n_target : NoneType, int<br ALIGN="LEFT"/>path2Xs<br ALIGN="LEFT"/>path2Xt<br ALIGN="LEFT"/>save_X : bool<br ALIGN="LEFT"/>weights : NoneType, list<br ALIGN="LEFT"/>|add_single_edge(source, target, weight, attributes)<br ALIGN="LEFT"/>add_single_node(node, attributes)<br ALIGN="LEFT"/>computeSimBiGraph(s_min, n_gnodesS, n_gnodesT, n_edges, similarity, g, blocksize, useGPU, verbose)<br ALIGN="LEFT"/>disconnect_nodes(source, target, directed)<br ALIGN="LEFT"/>drop_single_node(node)<br ALIGN="LEFT"/>get_source_nodes()<br ALIGN="LEFT"/>get_target_nodes()<br ALIGN="LEFT"/>get_terminals()<br ALIGN="LEFT"/>save_feature_matrix()<br ALIGN="LEFT"/>set_edges(source_nodes, target_nodes, weights)<br ALIGN="LEFT"/>set_nodes(nodes_orig, nodes_dest, Xs, Xt, save_T)<br ALIGN="LEFT"/>update_metadata()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.sgtaskmanager.SgTaskManager" [color="black", fontcolor="black", label=<{SgTaskManager|DM : NoneType<br ALIGN="LEFT"/>SG : NoneType<br ALIGN="LEFT"/>blocksize : NoneType<br ALIGN="LEFT"/>cf : NoneType<br ALIGN="LEFT"/>db_tables : dict<br ALIGN="LEFT"/>f_struct : dict<br ALIGN="LEFT"/>global_parameters<br ALIGN="LEFT"/>keep_active : bool<br ALIGN="LEFT"/>metadata_fname : str<br ALIGN="LEFT"/>path2ACL<br ALIGN="LEFT"/>path2agent<br ALIGN="LEFT"/>path2config<br ALIGN="LEFT"/>path2halo : NoneType<br ALIGN="LEFT"/>path2metadata<br ALIGN="LEFT"/>path2project : Path<br ALIGN="LEFT"/>path2source : NoneType<br ALIGN="LEFT"/>path2tm<br ALIGN="LEFT"/>ready2setup : bool<br ALIGN="LEFT"/>state : dict<br ALIGN="LEFT"/>useGPU : bool<br ALIGN="LEFT"/>|community_metric(path, community, parameter)<br ALIGN="LEFT"/>compare_communities(path1, comm1, path2, comm2, metric)<br ALIGN="LEFT"/>create(f_struct)<br ALIGN="LEFT"/>detectCommunities(algorithm, path, comm_label)<br ALIGN="LEFT"/>disambiguate_node()<br ALIGN="LEFT"/>display_bigraph(path2sedge, s_att1, s_att2, t_att, t_att2, template_html, template_js)<br ALIGN="LEFT"/>equivalence_graph(path)<br ALIGN="LEFT"/>export_bigraph(path2graph, label_source, label_target)<br ALIGN="LEFT"/>export_graph(path2graph, label_nodes)<br ALIGN="LEFT"/>generate_minigraph()<br ALIGN="LEFT"/>getGDBstruct()<br ALIGN="LEFT"/>get_Neo4J_sedges()<br ALIGN="LEFT"/>get_Neo4J_snodes()<br ALIGN="LEFT"/>get_attributes(path)<br ALIGN="LEFT"/>get_communities(path)<br ALIGN="LEFT"/>get_graphs_with_features()<br ALIGN="LEFT"/>get_local_features(path)<br ALIGN="LEFT"/>get_names_of_SQL_dbs()<br ALIGN="LEFT"/>get_names_of_dataset_tables()<br ALIGN="LEFT"/>get_source_atts(path)<br ALIGN="LEFT"/>get_sql_table_names(graph, db)<br ALIGN="LEFT"/>get_table_atts(graph, db, table)<br ALIGN="LEFT"/>get_target_atts(path)<br ALIGN="LEFT"/>graph_layout(path2snode, attribute)<br ALIGN="LEFT"/>import_SCOPUS_citations_graph(type_of_graph)<br ALIGN="LEFT"/>import_SCOPUS_citations_subgraph(type_of_graph)<br ALIGN="LEFT"/>import_agents(path2tables, path2snode)<br ALIGN="LEFT"/>import_and_infer_sim_graph(path, sim, n0, n_epn, label)<br ALIGN="LEFT"/>import_co_citations_graph()<br ALIGN="LEFT"/>import_node_atts(path, dbname, table, att, att_ref)<br ALIGN="LEFT"/>import_nodes_and_model(path)<br ALIGN="LEFT"/>import_snode_from_table(table_name)<br ALIGN="LEFT"/>inferBGfromA(path, attribute, t_label, e_label)<br ALIGN="LEFT"/>inferSimBG()<br ALIGN="LEFT"/>inferTransit(path_xm, path_my)<br ALIGN="LEFT"/>infer_eq_simgraph(path, sim)<br ALIGN="LEFT"/>infer_ppr_graph(path)<br ALIGN="LEFT"/>infer_sim_bigraph(s_label, t_label, sim)<br ALIGN="LEFT"/>infer_sim_graph(path2snode, sim, n0, n_epn)<br ALIGN="LEFT"/>largest_community_subgraph(path, comm)<br ALIGN="LEFT"/>load(f_struct)<br ALIGN="LEFT"/>local_graph_analysis(parameter, path)<br ALIGN="LEFT"/>profile_node()<br ALIGN="LEFT"/>remove_isolated_nodes(path)<br ALIGN="LEFT"/>remove_snode_attributes(path, att)<br ALIGN="LEFT"/>resetGDBdata(option, snodes, sedges)<br ALIGN="LEFT"/>reset_Neo4J()<br ALIGN="LEFT"/>reset_Neo4J_sedge(sedge)<br ALIGN="LEFT"/>reset_Neo4J_snode(snode)<br ALIGN="LEFT"/>reset_sedge(path)<br ALIGN="LEFT"/>reset_snode(path)<br ALIGN="LEFT"/>save_metadata()<br ALIGN="LEFT"/>set_logs()<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>showGDBdata(option, snodes, sedges)<br ALIGN="LEFT"/>showSDBdata(option)<br ALIGN="LEFT"/>show_Neo4J()<br ALIGN="LEFT"/>show_Neo4J_sedge(sedge)<br ALIGN="LEFT"/>show_Neo4J_snode(snode)<br ALIGN="LEFT"/>show_SuperGraph()<br ALIGN="LEFT"/>show_sedge(path2sedge)<br ALIGN="LEFT"/>show_snode(path2snode)<br ALIGN="LEFT"/>show_top_nodes(path, feature)<br ALIGN="LEFT"/>subsample_graph(path, mode)<br ALIGN="LEFT"/>transduce(path, order)<br ALIGN="LEFT"/>update_folders(f_struct)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.sim_graph.sim_bigraph.SimBiGraph" [color="black", fontcolor="black", label=<{SimBiGraph|Xeq : NoneType<br ALIGN="LEFT"/>Y<br ALIGN="LEFT"/>Yeq : NoneType<br ALIGN="LEFT"/>cluster_ids_source : NoneType<br ALIGN="LEFT"/>cluster_ids_target : NoneType<br ALIGN="LEFT"/>edge_ids : tuple, list<br ALIGN="LEFT"/>n_clusters_source : int, NoneType<br ALIGN="LEFT"/>n_clusters_target : NoneType<br ALIGN="LEFT"/>n_preclusters_source : NoneType<br ALIGN="LEFT"/>n_preclusters_target : NoneType<br ALIGN="LEFT"/>n_source<br ALIGN="LEFT"/>n_target<br ALIGN="LEFT"/>s_min : NoneType, float, ndarray<br ALIGN="LEFT"/>weights : NoneType, list<br ALIGN="LEFT"/>|cluster_equivalent_nodes(reduceX)<br ALIGN="LEFT"/>connectivity_graph(R, metric, verbose)<br ALIGN="LEFT"/>he_affinity(X, Y, R2, mapping, g)<br ALIGN="LEFT"/>sim_graph(s_min, n_edges)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.sim_graph.sim_graph.SimGraph" [color="black", fontcolor="black", label=<{SimGraph|X<br ALIGN="LEFT"/>Xeq : NoneType<br ALIGN="LEFT"/>cluster_ids : NoneType<br ALIGN="LEFT"/>dim<br ALIGN="LEFT"/>edge_ids : list, tuple, NoneType<br ALIGN="LEFT"/>n_clusters : int, NoneType<br ALIGN="LEFT"/>n_edges : NoneType, int<br ALIGN="LEFT"/>n_nodes<br ALIGN="LEFT"/>n_preclusters : NoneType<br ALIGN="LEFT"/>s_min : float, ndarray, NoneType<br ALIGN="LEFT"/>weights : NoneType, list<br ALIGN="LEFT"/>|JS2_affinity(X, Y, R2, mapping, g)<br ALIGN="LEFT"/>cluster_equivalent_nodes(reduceX)<br ALIGN="LEFT"/>computeXeq()<br ALIGN="LEFT"/>compute_id_graph(R, verbose)<br ALIGN="LEFT"/>connectivity_graph(R, metric, verbose)<br ALIGN="LEFT"/>div2sim(div, mapping, g, B)<br ALIGN="LEFT"/>he_affinity(X, R2, mapping, g)<br ALIGN="LEFT"/>l1_affinity(X, R, mapping, g)<br ALIGN="LEFT"/>l2_affinity(X, R2, mapping, g)<br ALIGN="LEFT"/>show_JS_bounds(s_min, sim, g, out_path, verbose)<br ALIGN="LEFT"/>sim2div(s, mapping, g, B)<br ALIGN="LEFT"/>simTest(D, R, sim, g, fpath, label)<br ALIGN="LEFT"/>sim_graph(s_min, n_edges)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.datamanager.cypher.Statement" [color="black", fontcolor="black", label=<{Statement|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"rdigraphs.supergraph.supergraph.SuperGraph" [color="black", fontcolor="black", label=<{SuperGraph|keep_active : bool<br ALIGN="LEFT"/>label : str<br ALIGN="LEFT"/>metagraph<br ALIGN="LEFT"/>path : NoneType<br ALIGN="LEFT"/>path2sedges : NoneType<br ALIGN="LEFT"/>path2snodes : NoneType<br ALIGN="LEFT"/>sedges : dict<br ALIGN="LEFT"/>snodes : dict<br ALIGN="LEFT"/>|activate_all()<br ALIGN="LEFT"/>activate_sedge(label)<br ALIGN="LEFT"/>activate_snode(label)<br ALIGN="LEFT"/>addSuperEdge(sedge, weight, attributes)<br ALIGN="LEFT"/>addSuperNode(snode, attributes)<br ALIGN="LEFT"/>add_snode_attributes(label, att, att_values)<br ALIGN="LEFT"/>clean_up_metagraph()<br ALIGN="LEFT"/>computeSimBiGraph(s_label, t_label, e_label, s_min, n_edges, n_gnodesS, n_gnodesT, similarity, g, blocksize, useGPU, tmp_folder, save_every, verbose)<br ALIGN="LEFT"/>computeSimGraph(label, s_min, n_edges, n_gnodes, similarity, g, blocksize, useGPU, tmp_folder, save_every, verbose)<br ALIGN="LEFT"/>compute_ppr(s_label, t_label, th, inplace)<br ALIGN="LEFT"/>cosine_sim(xlabel, ylabel)<br ALIGN="LEFT"/>deactivate()<br ALIGN="LEFT"/>deactivate_sedge(label)<br ALIGN="LEFT"/>deactivate_snode(label)<br ALIGN="LEFT"/>detectCommunities(label, alg, ncmax, comm_label)<br ALIGN="LEFT"/>disambiguate_node(node_name)<br ALIGN="LEFT"/>drop_sedge(label)<br ALIGN="LEFT"/>drop_snode(label)<br ALIGN="LEFT"/>duplicate_snode(xlabel, ylabel, out_path)<br ALIGN="LEFT"/>export_2_halo(e_label, s_att1, s_att2, t_att, t_att2)<br ALIGN="LEFT"/>filter_edges_from_sedge(label, th)<br ALIGN="LEFT"/>filter_edges_from_snode(label, th)<br ALIGN="LEFT"/>get_attributes(label, is_snode_name)<br ALIGN="LEFT"/>get_metadata(label, is_node_name)<br ALIGN="LEFT"/>get_sedges()<br ALIGN="LEFT"/>get_snodes()<br ALIGN="LEFT"/>get_terminals(e_label)<br ALIGN="LEFT"/>graph_layout(snode_label, attribute, gravity)<br ALIGN="LEFT"/>is_active_sedge(e_label)<br ALIGN="LEFT"/>is_active_snode(label)<br ALIGN="LEFT"/>is_sedge(e_label)<br ALIGN="LEFT"/>is_snode(label)<br ALIGN="LEFT"/>local_snode_analysis(label, parameter)<br ALIGN="LEFT"/>makeSuperNode(label, out_path, nodes, T, attributes, edge_class, save_T)<br ALIGN="LEFT"/>node_profile()<br ALIGN="LEFT"/>remove_isolated_nodes(label)<br ALIGN="LEFT"/>remove_snode_attributes(label, att_names)<br ALIGN="LEFT"/>save_metagraph()<br ALIGN="LEFT"/>save_supergraph()<br ALIGN="LEFT"/>snode_from_atts(source, attrib, target, path_snode, path_sedge, e_label, att_size)<br ALIGN="LEFT"/>snode_from_edges(source, edges, target, path_snode, path_sedge, e_label)<br ALIGN="LEFT"/>snode_from_eqs(source, target, path_snode, path_sedge, e_label)<br ALIGN="LEFT"/>sub_snode(xlabel, ynodes, ylabel, sampleT, save_T)<br ALIGN="LEFT"/>sub_snode_by_novalue(xlabel, att, value, ylabel, sampleT)<br ALIGN="LEFT"/>sub_snode_by_threshold(xlabel, att, th, bound, ylabel)<br ALIGN="LEFT"/>sub_snode_by_value(xlabel, att, value, ylabel)<br ALIGN="LEFT"/>transduce(xylabel, n, normalize, keep_active)<br ALIGN="LEFT"/>transitive_graph(e_label, xmlabel, mylabel, path_sedge, keep_active)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.sim_graph.th_ops.ThOps" [color="black", fontcolor="black", label=<{ThOps|blocksize : int<br ALIGN="LEFT"/>fpath_edges<br ALIGN="LEFT"/>fpath_values<br ALIGN="LEFT"/>save_every : float<br ALIGN="LEFT"/>tmp_folder<br ALIGN="LEFT"/>useGPU : bool<br ALIGN="LEFT"/>|bc_sim_bigraph(X: csr_matrix, Y: csr_matrix, s_min: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]<br ALIGN="LEFT"/>bc_sim_graph(X: csr_matrix, s_min: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]<br ALIGN="LEFT"/>cosine_sim_bigraph(X: csr_matrix, Y: csr_matrix, s_min: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]<br ALIGN="LEFT"/>cosine_sim_graph(X: csr_matrix, s_min: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]<br ALIGN="LEFT"/>he_neighbors_bigraph(X: csr_matrix, Y: csr_matrix, R2: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]<br ALIGN="LEFT"/>he_neighbors_graph(X: csr_matrix, R2: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]<br ALIGN="LEFT"/>ncosine_sim_bigraph(X: csr_matrix, Y: csr_matrix, s_min: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]<br ALIGN="LEFT"/>ncosine_sim_graph(X: csr_matrix, s_min: float, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]<br ALIGN="LEFT"/>th_prod(th: float, X: csr_matrix, Y: csr_matrix, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]<br ALIGN="LEFT"/>th_selfprod(th: float, X: csr_matrix, mode: str, verbose: bool): Union[List[Tuple[int, int]], Tuple[List[Tuple[int, int]], List[float]]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.datamanager.cypher.UpdateTable" [color="black", fontcolor="black", label=<{UpdateTable|<br ALIGN="LEFT"/>|assemble(parameters: dict): typing.Union[str, typing.List[str]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.valtaskmanager.ValTaskManager" [color="black", fontcolor="black", label=<{ValTaskManager|models_2_validate : dict<br ALIGN="LEFT"/>path2out<br ALIGN="LEFT"/>path2project : Path<br ALIGN="LEFT"/>path2val<br ALIGN="LEFT"/>val_params : dict<br ALIGN="LEFT"/>|analyze_scalability()<br ALIGN="LEFT"/>analyze_variability()<br ALIGN="LEFT"/>compute_all_sim_graphs()<br ALIGN="LEFT"/>compute_reference_graph()<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>show_scalability_results()<br ALIGN="LEFT"/>show_subtrain_results()<br ALIGN="LEFT"/>show_validation_results()<br ALIGN="LEFT"/>show_variability_results()<br ALIGN="LEFT"/>subsample_reference_graph()<br ALIGN="LEFT"/>validate_subtrain_models()<br ALIGN="LEFT"/>validate_topic_models()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.supergraph.validator.Validator" [color="black", fontcolor="black", label=<{Validator|DM<br ALIGN="LEFT"/>SG : NoneType<br ALIGN="LEFT"/>blocksize : int<br ALIGN="LEFT"/>corpus_name<br ALIGN="LEFT"/>epn : int<br ALIGN="LEFT"/>model<br ALIGN="LEFT"/>models_fname : str<br ALIGN="LEFT"/>n_nodes_db : int<br ALIGN="LEFT"/>n_nodes_rg : int<br ALIGN="LEFT"/>path2out<br ALIGN="LEFT"/>path2rgs<br ALIGN="LEFT"/>path2sca<br ALIGN="LEFT"/>path2sub<br ALIGN="LEFT"/>path2val<br ALIGN="LEFT"/>path2var<br ALIGN="LEFT"/>ref_graph_epn : int<br ALIGN="LEFT"/>ref_graph_prefix : str<br ALIGN="LEFT"/>useGPU : bool<br ALIGN="LEFT"/>|analyze_scalability()<br ALIGN="LEFT"/>analyze_variability()<br ALIGN="LEFT"/>compute_all_sim_graphs()<br ALIGN="LEFT"/>compute_reference_graph()<br ALIGN="LEFT"/>readCoordsFromFile(fpath, fields, sparse, path2nodenames, ref_col, path2params)<br ALIGN="LEFT"/>show_scalability_results()<br ALIGN="LEFT"/>show_subtrain_results()<br ALIGN="LEFT"/>show_validation_results()<br ALIGN="LEFT"/>show_variability_results()<br ALIGN="LEFT"/>subsample_reference_graph()<br ALIGN="LEFT"/>validate_subtrain_models()<br ALIGN="LEFT"/>validate_topic_models()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.sim_graph.th_ops.base_ThOps" [color="black", fontcolor="black", label=<{base_ThOps|blocksize : int<br ALIGN="LEFT"/>|he_neighbors_bigraph(X, Y, R0, mode, verbose)<br ALIGN="LEFT"/>he_neighbors_graph(X, R0, mode, verbose)<br ALIGN="LEFT"/>th_prod(th, X, Y, mode, verbose)<br ALIGN="LEFT"/>th_selfprod(th, X, mode, verbose)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"rdigraphs.datamanager.callbacks.AuthorsDisambiguator" -> "rdigraphs.datamanager.callbacks.Disambiguator" [arrowhead="empty", arrowtail="none"];
"rdigraphs.datamanager.callbacks.OrganizationsDisambiguator" -> "rdigraphs.datamanager.callbacks.AuthorsDisambiguator" [arrowhead="empty", arrowtail="none"];
"rdigraphs.datamanager.cypher.DataLoadingStatement" -> "rdigraphs.datamanager.cypher.Statement" [arrowhead="empty", arrowtail="none"];
"rdigraphs.datamanager.cypher.LoadAttributesTable" -> "rdigraphs.datamanager.cypher.DataLoadingStatement" [arrowhead="empty", arrowtail="none"];
"rdigraphs.datamanager.cypher.LoadJoinTable" -> "rdigraphs.datamanager.cypher.DataLoadingStatement" [arrowhead="empty", arrowtail="none"];
"rdigraphs.datamanager.cypher.LoadTable" -> "rdigraphs.datamanager.cypher.DataLoadingStatement" [arrowhead="empty", arrowtail="none"];
"rdigraphs.datamanager.cypher.MakeRelationship" -> "rdigraphs.datamanager.cypher.DataLoadingStatement" [arrowhead="empty", arrowtail="none"];
"rdigraphs.datamanager.cypher.UpdateTable" -> "rdigraphs.datamanager.cypher.DataLoadingStatement" [arrowhead="empty", arrowtail="none"];
"rdigraphs.datamanager.datamanager.DMneo4j" -> "rdigraphs.datamanager.base_dm_neo4j.BaseDMneo4j" [arrowhead="empty", arrowtail="none"];
"rdigraphs.datamanager.datamanager.DMsql" -> "rdigraphs.datamanager.base_dm_sql.BaseDMsql" [arrowhead="empty", arrowtail="none"];
"rdigraphs.labtaskmanager.LabTaskManager" -> "rdigraphs.sgtaskmanager.SgTaskManager" [arrowhead="empty", arrowtail="none"];
"rdigraphs.sim_graph.sim_bigraph.SimBiGraph" -> "rdigraphs.sim_graph.sim_graph.SimGraph" [arrowhead="empty", arrowtail="none"];
"rdigraphs.sim_graph.sim_graph.SimGraph" -> "rdigraphs.sim_graph.th_ops.ThOps" [arrowhead="empty", arrowtail="none"];
"rdigraphs.supergraph.sedge.SEdge" -> "rdigraphs.supergraph.snode.DataGraph" [arrowhead="empty", arrowtail="none"];
"rdigraphs.supergraph.snode_sql.DataGraph_sql" -> "rdigraphs.supergraph.snode.DataGraph" [arrowhead="empty", arrowtail="none"];
"rdigraphs.valtaskmanager.ValTaskManager" -> "rdigraphs.sgtaskmanager.SgTaskManager" [arrowhead="empty", arrowtail="none"];
"rdigraphs.community_plus.community_plus.CommunityPlus" -> "rdigraphs.supergraph.snode.DataGraph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="CD", style="solid"];
"rdigraphs.datamanager.datamanager.DMneo4j" -> "rdigraphs.datamanager.datamanager.DataManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="Neo4j", style="solid"];
"rdigraphs.datamanager.datamanager.DMsql" -> "rdigraphs.datamanager.datamanager.DataManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lastSQL", style="solid"];
"rdigraphs.datamanager.datamanager.DataManager" -> "rdigraphs.sgtaskmanager.SgTaskManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="DM", style="solid"];
"rdigraphs.sgtaskmanager.SgTaskManager" -> "rdigraphs.menu_navigator.menu_navigator.MenuNavigator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tm", style="solid"];
"rdigraphs.sim_graph.sim_graph.SimGraph" -> "rdigraphs.supergraph.snode.DataGraph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sg", style="solid"];
"rdigraphs.supergraph.snode.DataGraph" -> "rdigraphs.supergraph.supergraph.SuperGraph" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="metagraph", style="solid"];
"rdigraphs.supergraph.supergraph.SuperGraph" -> "rdigraphs.sgtaskmanager.SgTaskManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SG", style="solid"];
"rdigraphs.supergraph.supergraph.SuperGraph" -> "rdigraphs.sgtaskmanager.SgTaskManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SG", style="solid"];
"rdigraphs.supergraph.supergraph.SuperGraph" -> "rdigraphs.supergraph.validator.Validator" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="SG", style="solid"];
"rdigraphs.sgtaskmanager.SgTaskManager" -> "rdigraphs.menu_navigator.menu_navigator.MenuNavigator" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="tm", style="solid"];
}
